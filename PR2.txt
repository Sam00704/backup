import tensorflow as tf
import matplotlib.pyplot as plt
import random
from tensorflow import keras
from keras.optimizers import SGD
import numpy as np

data = tf.keras.datasets.mnist

(x_train,y_train),(x_test,y_test) = data.load_data()

x_train.shape

x_train[0]

x_train=x_train/255.0
x_test = x_test/255.0

x_train.shape

model = keras.models.Sequential([
    keras.layers.Flatten(input_shape =(28,28)),
    keras.layers.Dense(150, activation='relu'),
    keras.layers.Dense(10,activation='softmax')
])

model.compile(optimizer='sgd',loss='sparse_categorical_crossentropy',metrics=['accuracy'])


history = model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=3)


loss,accuracy = model.evaluate(x_test,y_test)

model.summary
print(f"Loss : {loss}")
print(f"Accuracy : {accuracy}")


n = random.randint(0,len(x_test))
plt.imshow(x_test[n])
plt.show()

predicted = model.predict(x_test)
print("Probability values:",predicted[n])
print(f"Predicted Value: {np.argmax(predicted[n])}")


plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title("Accuracy and Loss Graph")
plt.xlabel("epoch")
plt.ylabel("Accuracy / Loss")
plt.legend(['accuracy','val_accuracy','loss','val_loss'])
plt.show